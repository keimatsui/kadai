今回私はGitHubリポジトリの特徴抽出とクラスタリングについて研究しました。

まず初めに序論です。
システム開発は大規模化していき複数人でソースコードを書くことも多くなっていきました。
複数人で書く事や大量のソースコードを書くことはそれだけミスも多くなっていきます。
例えば誰かがいつの間にかコードを書き足していて、どこを書き足したかわからない。
アップデートを重ねていたがうまく動かなくなってしまったため一度昔の状態に戻したいなどです。
そういった問題を解消するのににバージョン管理システムはとても有効です。
バージョン管理システムとは編集され更新されるファイルの変更履歴を保存してくれるシステムです。
この変更履歴は誰がいつ、どこを更新したかが分かります。
このバージョン管理システム使うことにより先ほど挙げた問題点の他にもシステム開発の大規模化により発生する問題は解消されます。


バージョン管理システムにはGitというものがあります。そして今回の研究対象ではこのGitを利用したサービスであるGitHubを対象にしていきます。
まずこのGitHubを研究対象に選んだ理由は2つあります。一つ目にこのGitHubにはソーシャルコーディングを助ける機能が複数あるからです。
ソーシャルコーディングとはプログラムソースコードをネット上で共有し、不特定多数の人間と意見を出し合いながらシステム開発を行う事です。
二つ目にこのGitHubではAPIを提供していることです。
今回の研究ではこのGitHubの機能を使用、不使用ごとにリポジトリ（プロジェクトのようなもの）を調べます。

目的です。
今回の研究の目的はソーシャルコーディングを助ける機能を複数持つGitHubの機能に着目し、機能の使用、不使用でリポジトリがどう違ってくるのか調べます。
違いが判ることにより機能がどう働いているのか分かると考えます。また機能ごとにどのような効果があるか分かったならば今後はどのようにソーシャルコーディング
を進めていくかという問題に対して適切な機能の取捨選択をする材料になると考えられる。

手法です。
今回の研究ではこのようなことを行います。
まず初めにデータを取得します。
そしてそのデータを機能の使用不使用ごとに分けます。
その後集めたデータに主成分分析、クラスター分析を行います。


ではまず初めにGitHubAPIを使いデータを集める所から説明させていただきます。
すべてのリポジトリを取得してもいいのですが中にはソーシャルコーディングが目的ではないリポジトリもあるため今回は取得する対象リポジトリの条件を設定します。
GitHubAPIを使い取得するデータは2017年から2019年のトレンドリポジトリを対象とします。
このトレンドリポジトリとはstars数500以上を今回は指定しています。starsとは評価みたいなものでいいねみたいなものです。
今回取得するデータはsize,forks,stars,open_issuesです。


その後取得したデータを機能の使用、不使用毎に分けます。今回はIssues，projects，downlods，wiki，pages毎に分けました。
この各機能の説明としましてはissuesとは機能の追加やバグ修正などのタスク管理をする機能で、projectsはカンバン機能と呼ばれissues等をグループ分けできる機能です。
wikiとはリポジトリの説明等のページを作成し書き込める機能で、pagesはHTML等を使いページを作成できる機能です。
これらの機能を使用していなかった場合、使用していた場合で分けます。
使用しているしいていないかに関しては使用いている場合はTRUE、していない場合はFALSEで返してくれるためそれで判断します。

この分けたデータに主成分分析、クラスター分析を行います。
主成分分析をを行うことによりデータの分布がわかりやすくなり成分傾向がわかります。
クラスター分析を行うことによりクラスター（群）がわかりこのデータはこれらのクラスターが多いなどがわかります。




主成分分析の結果とクラスター分析の結果です。


まず初めに機能ごとに分けていないリポジトリとすべての機能を使ったリポジトリの主成分分析の比較です。
まずopen_issuesに関して、すべてのリポジトリではopen_issuesはstars、forksに近いことがわかります。
またすべての機能を使ったリポジトリではopen_issuesはsizeに近いことがわかります。
issues以外のことでも違った部分があります。
stars数とforks数を見てみるとすべての機能を使っているほうが近いことがわかります。


次にissuesを使っているか使っていないかでどう違うのか見ていきたいと思います。
まず初めに縦軸は向きは違いますがsizeを表していることがわかります。横軸はstars,forksともに同じ長さでこれらの量を表していることがわかります。
線の向きに注目してみるとどちらも同じような傾向をとっていることが分かります。



次にprojectsを使っているか使っていないかでどう違うのか見ていきたいと思います。
まず初めにこちらも縦軸はsizeを表していることが分かります。
横軸を見てみると一番の大きな違いがissuesだと分かります。
projectの機能を使っている主成分分析ではすべての機能を使った主成分分析と同様にsizeが上がるごとにissues数も上昇していきます。
逆にprojectの機能を使っていない主成分分析ではすべてのリポジトリの主成分分析と同様にsizeが上がるごとに減少していきます。



次にクラスター分析の結果を見ていきます。

まず初めに各クラスターについて見て行きます。
すべてのリポジトリにあるクラスター1、すべての機能を使ったリポジトリにあるクラスター3はほぼ同一の分け方で分けられたクラスターであると考えられる。
これらのクラスターは極端にサイズが高いリポジトリが選ばれていると考えられます。
どちらのクラスター分析でも斜めに広い分布が見られます。
すべてのリポジトリのクラスター2はサイズとissuesの平均を表しておりすべての機能を使ったリポジトリではサイズとforksの平均を表していると考えられます。
両方のクラスターの縦軸、横軸に推測がたてられたところで残りの赤いクラスターに注目していきます。
すべてのリポジトリでは赤いクラスターはほぼまっすぐ上になっています。
横はissuesを表しているためサイズが上がってもissuesが上昇していないと考えられます。
一方すべての機能を使ったリポジトリでは赤いクラスターは斜めになっています。
横軸はforksを表しているため、サイズが上昇するごとにforksも上昇していると考えられます。
両方のクラスターともに赤いクラスターがそのデータの平均前後のデータが含まれていると考えます。


考察です。
まず初めに主成分分析からです。
全ての機能を使っていた場合sizeとissuesに強い相関がみられました。
これはprojectsの主成分分析でも見られました。
issuesがあるというのは一見悪い事のように感じますが、
機能改善などリポジトリをよりよくするためにはあってしかるべきものだと考えます。
またstarsとforkの値も近くなることから、
リポジトリの評価に対して参加人数が伸びやすくなる傾向にあると考えられます。

クラスター分析ではどちらも分布自体は似ていますが明らかに分布の広さが違いまた角度も違います。
広さの関してはただ単純に分布の広さを表しているだけですが角度は違います。
角度は各要素が互いにどのくらい影響するかを表していると考えられ、
全ての機能を使ったほうが影響が大きいと考えられます。
赤いクラスターはそのデータの平均前後のデータが含まれていると考えられるため、
横軸に変動が無い場合あまりその他の要素に影響がないと考えられる。
このことから全ての機能を使っていたほうがsizeが上がるごとに問題点が見つかりやすくなることが分かります。

